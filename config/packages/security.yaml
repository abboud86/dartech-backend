security:
  password_hashers:
    App\Entity\User:
      algorithm: auto


  providers:
    app_user_provider:
      entity:
        class: App\Entity\User
        property: email
    # used to reload user from session & other features (e.g. switch_user)

  firewalls:
    dev:
      pattern: ^/(?:_(?:profiler|wdt)|assets/(?:css|images|js))/
      security: false

    main:
      stateless: true
      provider: app_user_provider
      entry_point: App\Security\JsonUnauthorizedEntryPoint
      login_throttling:
        max_attempts: 5
        interval: '1 minute'
      custom_authenticators:
        - App\Security\TestTokenAuthenticator
        - App\Security\TokenAuthenticator

  access_control:
    - { path: ^/v1/auth/register$, roles: PUBLIC_ACCESS, methods: [POST] }
    - { path: ^/v1/auth/login$,    roles: PUBLIC_ACCESS, methods: [POST] }
    - { path: ^/v1/auth/logout$,        roles: PUBLIC_ACCESS, methods: [POST] }
    # 1) Préflight CORS / OPTIONS = public (ne doit JAMAIS renvoyer 401)
    - { path: ^/, roles: PUBLIC_ACCESS, methods: [OPTIONS] }


    # 2) Endpoints PUBLICS spécifiques (placer avant la règle générique ^/v1)
    - { path: ^/v1/categories$, roles: PUBLIC_ACCESS, methods: [GET] }
    - { path: ^/v1/categories/, roles: PUBLIC_ACCESS, methods: [GET] } # si un jour /v1/categories/<slug>
    - { path: ^/v1/services$, roles: PUBLIC_ACCESS, methods: [GET] }
    - { path: ^/v1/services/, roles: PUBLIC_ACCESS, methods: [GET] }

    # 3) Liveness/Readiness = public
    - { path: ^/healthz$, roles: PUBLIC_ACCESS }

    # 4) API v1 = authentification requise (générique)
    - { path: ^/v1, roles: IS_AUTHENTICATED_FULLY }
